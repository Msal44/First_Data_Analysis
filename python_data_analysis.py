# -*- coding: utf-8 -*-
"""python_data_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12T_QXElsBrI15vBpWqV0_FW9JWuTEt9H
"""

#pandas is a data manipulation and analysis tool that is built on numpy
#pandas uses a data structure known as a dataframe (basically exel in python).
#dataframes empower progrmmers to store and manipulate data in tabular fashion (rows and columns)
#series vs. dataframe? Series is considered a single column of a dataframe

import pandas as pd

#define a two-dimensional Pandas dataframe
#note that you can create a pandas dataframe from a python dictionary

bank_client_df = pd.DataFrame({'Bank Client ID': [1, 2, 3, 4],
                               'Bank Client Name': ['Channel', 'Steve', 'Mitch', 'Ryan'],
                               'Net Worth [$]': [3500, 2900, 10000, 2000],
                               'Years with bank': [3,4,9,7]
                               })
bank_client_df

#let's obtian the data type

type(bank_client_df)

#you can only view the first couple rows using .head()
bank_client_df.head()

#you can only view the last couple of rows using .tail()
bank_client_df.tail()

'''
MINI CHALLENGE #6:

A porfolio contains a collection of securities such as stocks,
bonds and ETFs. Define a dataframe named 'portfolio_df' that holds
3 different stock ticker symbols, number of shares, and price per
share (feel free to choose any stocks)


Calculate the total value of the porfolio including all stocks
'''
portfolio_df = pd.DataFrame({'stock ticker symbol': ['JMT', 'JTT', 'RT'],
                               'number of shares': [100000, 2000000000, 5000000000],
                               'price per share': [2500, 8, 500]
                               })
portfolio_df

portfolio_df['total value'] = portfolio_df['number of shares'] * portfolio_df['price per share']
total_value = portfolio_df['total value'].sum()
print('Total value of portfolio:', total_value)

#read tabular data using read_html
url = 'https://www.livingin-canada.com/house-prices-canada.html'
tables = pd.read_html(url)

# tables is a list of dataframes
df = tables[0]  # get the first dataframe from the list

df

!pip install lxml

!python -m pip install --upgrade pip

'''
MINI CHALLENGE #7:

Write a code that uses Pandas to read tabular US retirement data
You can use data from here: https://www.ssa.gov/oact/progdata/nra.html
'''

#read tabular data using read_html
url = 'https://www.ssa.gov/oact/progdata/nra.html'
tables = pd.read_html(url)

# tables is a list of dataframes
df = tables[0]  # get the first dataframe from the list

df

#8

bank_client_df = pd.DataFrame({'Bank Client ID': [1, 2, 3, 4],
                               'Bank Client Name': ['Channel', 'Steve', 'Mitch', 'Ryan'],
                               'Net Worth [$]': [3500, 2900, 10000, 2000],
                               'Years with bank': [3,4,9,7]
                               })
bank_client_df

#Pick certain rows that satisfy a certain criteria

df_loyal = bank_client_df[ bank_client_df['Years with bank'] >=5 ]
df_loyal

del bank_client_df['Bank Client ID']
bank_client_df

'''
MINI CHALLENGE #8:

Using "bank_client_df" DataFrame, leverage pandas operations to only
select high networth individuals with minimum $5000

What is the combined networth for all customers with 5000+ networth?
'''
bank_client_df = pd.DataFrame({'Bank Client ID': [1, 2, 3, 4],
                               'Bank Client Name': ['Channel', 'Steve', 'Mitch', 'Ryan'],
                               'Net Worth [$]': [3500, 29000, 10000, 2000],
                               'Years with bank': [3,4,9,7]
                               })
bank_client_df

combined_networth = bank_client_df[ bank_client_df['Net Worth [$]'] >=5000 ]
combined_networth

#9 Pandas With Functions

bank_client_df = pd.DataFrame({'Bank Client ID': [1, 2, 3, 4],
                               'Bank Client Name': ['Channel', 'Steve', 'Mitch', 'Ryan'],
                               'Net Worth [$]': [3500, 2900, 10000, 2000],
                               'Years with bank': [3,4,9,7]
                               })
bank_client_df

#Pandas with functions

#Let's define a dataframe as follow:
bank_client_df = pd.DataFrame({'Bank Client ID': [1, 2, 3, 4],
                               'Bank Client Name': ['Channel', 'Steve', 'Mitch', 'Ryan'],
                               'Net Worth [$]': [3500, 2900, 10000, 2000],
                               'Years with bank': [3,4,9,7]
                               })
bank_client_df

#You can apply a funciton that increases all clients networth (stock) by a fixed value of 20% (for simplicty)

def networth_update(balance):
  return balance * 1.2

#You can apply a function to the dataframe
#displays new networth
bank_client_df['Net Worth [$]'].apply(networth_update)

bank_client_df['Bank Client Name']

bank_client_df['Bank Client Name'].apply(len)

'''
MINI CHALLENGE #9:

Define a function that triples the stock prices and adds $200
Apply the function to the DataFrame
Calculate the updated total networth of all clients combined
'''

#Let's define a dataframe as follow:
bank_client_df = pd.DataFrame({'Bank Client ID': [1, 2, 3, 4],
                               'Bank Client Name': ['Channel', 'Steve', 'Mitch', 'Ryan'],
                               'Net Worth [$]': [3500, 29000, 10000, 2000],
                               'Years with bank': [3,4,9,7]
                               })
bank_client_df

def networth_update(balance):
  return balance * 3 + 200


results = bank_client_df['Net Worth [$]'].apply(networth_update)

results

results.sum()

#Task 10: Perform sorting and ordering in pandas
#Let's define a dataframe as follow:
bank_client_df = pd.DataFrame({'Bank Client ID': [1, 2, 3, 4],
                               'Bank Client Name': ['Channel', 'Steve', 'Mitch', 'Ryan'],
                               'Net Worth [$]': [3500, 29000, 10000, 2000],
                               'Years with bank': [3,4,9,7]
                               })
bank_client_df

#You can sort the values in the dataframe according to number of years with bank
bank_client_df.sort_values(by = 'Years with bank')

bank_client_df

#Set inplace = True to ensure that change has taken place in memory

bank_client_df.sort_values(by = 'Years with bank', inplace = True)

#note that now the change (ordering too place)
bank_client_df

#Task 11: Perfrom Concatenating and MErging with Pandas

df1 = pd.DataFrame({'A': ['A0','A1','A2','A3'],
                    'B': ['B0', 'B1','B2', 'B3'],
                    'C': ['C0', 'C1','C2', 'C3'],
                    'D': ['D0', 'D1','D2', 'D3']},
                    index = [0,1,2,3])
df1

df2 = pd.DataFrame({'A': ['A4','A5','A6','A7'],
                    'B': ['B4', 'B5','B6', 'B7'],
                    'C': ['C4', 'C5','C6', 'C7'],
                    'D': ['D4', 'D5','D6', 'D7']},
                    index = [4,5,6,7])
df2

df3 = pd.DataFrame({'A': ['A8','A9','A10','A11'],
                    'B': ['B8', 'B9','B10', 'B11'],
                    'C': ['C8', 'C9','C10', 'C11'],
                    'D': ['D8', 'D9','D10', 'D11']},
                    index = [8,9,10,11])
df3

pd.concat([df1,df2,df3])

#Task #12: Project/Capstone
'''
Define a dataframe named 'Bank_df_1' that contains the first and last names for
5 bank clients with IDs = 1, 2, 3, 4, 5

'''
bank_df1 = pd.DataFrame({'Bank Client ID': [1, 2, 3, 4, 5],
                               'Bank Client Name': ['Channel', 'Steve', 'Mitch', 'Ryan', 'Melvyn'],
                               'Net Worth [$]': [3500, 2900, 10000, 2000, 6000],
                               'Years with bank': [3,4,9,7,2]
                               })
bank_df1

'''
Assume that the bank got 5 new clients, define another dataframe named
'Bank_df_2' that contains a new clients with IDs = 6, 7, 8, 9, 10
'''
bank_df2 = pd.DataFrame({'Bank Client ID': [6, 7, 8, 9, 10],
                               'Bank Client Name': ['Jake', 'Susan', 'Nathan', 'Collin', 'Kewl Guy'],
                               'Net Worth [$]': [6500, 1900, 1000, 2000, 5000],
                               'Years with bank': [3,7,1,7,2]
                               })
bank_df2

'''
Let's assume we obtained additional information (Annual Salary) about all our
bank customers (10 customers)
'''

# Define the new column
new_column = [50000, 60000, 70000, 80000, 90000]

# Check the length of the existing dataframe
'''
In this example, the if statement checks whether the length of the 'new_column' list matches the length of the 'bank_df1' dataframe.
If the lengths match, the new column is added to the dataframe using the bank_df1['Salary'] = new_column statement. If the lengths do not match, an error message is printed.
'''
if len(new_column) == len(bank_df1):
    # Add the new column to the dataframe
    bank_df1['Salary'] = new_column
else:
    print("Error: The length of the new column does not match the length of the existing dataframe.")

# Display the updated dataframe
print(bank_df1)

# Define the new column
new_column = [90000, 100000, 120000, 50000, 80000]

# Check the length of the existing dataframe
'''
In this example, the if statement checks whether the length of the 'new_column' list matches the length of the 'bank_df1' dataframe.
If the lengths match, the new column is added to the dataframe using the bank_df1['Salary'] = new_column statement. If the lengths do not match, an error message is printed.
'''
if len(new_column) == len(bank_df2):
    # Add the new column to the dataframe
    bank_df2['Salary'] = new_column
else:
    print("Error: The length of the new column does not match the length of the existing dataframe.")

# Display the updated dataframe
print(bank_df2)

'''
Concatenate both 'bank_df_1' and 'bank_df_2' dataframes
'''
bank_df = pd.concat([bank_df1,bank_df2])

bank_df

'''
Merge client names and their newly added salary information using the
'Bank Client ID'
'''
merged_df = pd.merge(bank_df1, bank_df2, on='Bank Client ID')

merged_df

'''
Let's assume that you became a new client to the bank

Define a new DataFrame that contains your information such as client ID
(choose 11), first name, last name, and annual salary.

Add this new dataframe to the original dataframe 'bank_df_all'.
'''
new_row = {'Bank Client ID': 11,
           'Bank Client Name': 'Michael',
           'Net Worth [$]': 100000,
           'Years with bank': 10,
           'Salary': 150000
          }
bank_df = bank_df.append(new_row, ignore_index=True)

# Display the updated dataframe
print(bank_df)

